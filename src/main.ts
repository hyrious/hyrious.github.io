import './style.scss'

export type Post = import('../scripts/markdown-to-js').Parsed

// variables here are only for SSR, they are empty in browser
export let templates: { [path: string]: string } = {}
export let posts: { [path: string]: { readonly default: Required<Post> } } = {}
//                   ^^^^ parse(path) => id
//                                  ^^^^ generated by ../scripts/vite-plugin-posts.ts

if (import.meta.env.SSR || import.meta.hot) {
  templates = import.meta.glob('./templates/*.html', { as: 'raw', eager: true })
  posts = import.meta.glob('../posts/*.md', { eager: true })

  if (import.meta.hot) {
    const { compile, makeArgs } = await import('../scripts/compile-template')

    function refresh(html: string) {
      const dom = new DOMParser().parseFromString(html, 'text/html')
      document.title = dom.title || 'hyrious.log'
      document.body.className = dom.body.className
      document.body.innerHTML = dom.body.innerHTML
    }

    async function update(t: typeof templates, p: typeof posts) {
      const { pathname } = location
      const posts_ = Object.values(p).map((e) => e.default)
      const argsStr = '{ site, posts, post, strip_html, katex }'
      console.debug({ t, p })

      // update /index.html
      if (['/', '/index', '/index.html'].includes(pathname)) {
        const render = compile('index', t['./templates/index.html'], argsStr)
        return refresh(render(makeArgs(posts_)))
      }

      // update /p/index.html
      else if (['/p/', '/p/index', '/p/index.html'].includes(pathname)) {
        const render = compile('p', t['./templates/p.html'], argsStr)
        return refresh(render(makeArgs(posts_)))
      }

      // update /p/hello-world.html
      else if (pathname.startsWith('/p/')) {
        const id = pathname.slice(3).replace(/\.html$/, '')
        const post = p[`../posts/${id}.md`]?.default
        if (post) {
          const render = compile('post', t['./templates/post.html'], argsStr)
          return refresh(render(makeArgs(posts_, post)))
        }
      }

      // 404
      document.title = '404 Not found'
      document.body.className = ''
      document.body.innerHTML = `<h1>404 Not found</h1>`
    }

    if (!import.meta.hot.data.accepted) {
      await update(templates, posts)
    }

    import.meta.hot.accept(async (mod) => {
      if (mod) {
        await update(mod.templates, mod.posts)
        import.meta.hot!.data.accepted = true
      }
    })
  }
}
